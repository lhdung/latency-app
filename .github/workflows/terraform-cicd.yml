name: Simple Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-cicd.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "us-east-1"

jobs:
  terraform-validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: false

      - name: Validate Dev Environment
        run: |
          cd terraform/environments/dev
          terraform init -backend=false
          terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint Analysis
        run: |
          cd terraform
          tflint --init
          tflint --recursive

  terraform-plan:
    name: Plan Terraform Changes
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars for CI
        run: |
          cd terraform/environments/dev
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          ssh_allowed_cidr = ["0.0.0.0/0"]
          docker_image = "lhdung/latency-app:latest"
          owner = "ci-cd"
          cost_center = "development"
          EOF

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/dev
          terraform plan -no-color -out=plan.tfplan
        continue-on-error: true

      - name: Update Pull Request with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Plan üìñ
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Apply Terraform Changes
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'
    environment: development
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars for CI
        run: |
          cd terraform/environments/dev
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          ssh_allowed_cidr = ["0.0.0.0/0"]
          docker_image = "lhdung/latency-app:latest"
          owner = "ci-cd"
          cost_center = "development"
          EOF

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -auto-approve

      - name: Save Outputs
        id: outputs
        run: |
          cd terraform/environments/dev
          echo "latency_monitor_ip=$(terraform output -raw latency_monitor_ip)" >> $GITHUB_OUTPUT
          echo "target_server_ip=$(terraform output -raw target_server_ip)" >> $GITHUB_OUTPUT
          echo "api_endpoint=$(terraform output -raw latency_monitor_url)" >> $GITHUB_OUTPUT

      - name: Test Deployment
        run: |
          echo "Testing deployment..."
          sleep 120  # Wait for services to start
          
          # Test API endpoint
          if curl -f -s "${{ steps.outputs.outputs.api_endpoint }}/health" > /dev/null; then
            echo "‚úÖ API health endpoint is responding"
          else
            echo "‚ùå API health endpoint is not responding"
            exit 1
          fi
          
          # Test latency endpoint
          if curl -f -s "${{ steps.outputs.outputs.api_endpoint }}/latency" > /dev/null; then
            echo "‚úÖ Latency endpoint is responding"
          else
            echo "‚ùå Latency endpoint is not responding" 
            exit 1
          fi

